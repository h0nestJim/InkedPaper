[{"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/index.js":"1","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/serviceWorkerRegistration.js":"2","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/store.js":"3","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/App.js":"4","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reportWebVitals.js":"5","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/productReducers.js":"6","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/artistReducer.js":"7","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/cartReducer.js":"8","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/userReducers.js":"9","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/orderReducers.js":"10","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Footer.js":"11","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Header.js":"12","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ArtistScreen.jsx":"13","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/HomeScreens.jsx":"14","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/RegisterScreen.jsx":"15","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/LandingScreen.jsx":"16","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/CartScreen.jsx":"17","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/UserEditScreen.jsx":"18","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/About.jsx":"19","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProductListScreen.jsx":"20","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProductEditScreen.jsx":"21","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ShippingScreen.jsx":"22","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/CheckoutScreen.jsx":"23","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/UserListScreen.jsx":"24","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/PlaceOrderScreen.jsx":"25","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/PaymentScreen.jsx":"26","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProfileScreen.jsx":"27","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProductScreen.jsx":"28","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/LoginScreen.jsx":"29","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/OrderScreen.jsx":"30","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/productConstants.js":"31","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/artistConstants.js":"32","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/orderConstants.js":"33","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/cartConstants.js":"34","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/userConstants.js":"35","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/userActions.js":"36","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/artistActions.js":"37","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/productActions.js":"38","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/cartActions.js":"39","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Search.jsx":"40","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/orderActions.js":"41","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/formContainer.jsx":"42","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Artist.jsx":"43","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Product.jsx":"44","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Message.jsx":"45","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Loader.jsx":"46","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/CheckoutProgressBar.jsx":"47","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/PaymentWidgets/CreditCardForm.jsx":"48","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/PaymentWidgets/Field.jsx":"49"},{"size":704,"mtime":1615739170000,"results":"50","hashOfConfig":"51"},{"size":5064,"mtime":1615739170000,"results":"52","hashOfConfig":"51"},{"size":2088,"mtime":1615739170000,"results":"53","hashOfConfig":"51"},{"size":2604,"mtime":1615739170000,"results":"54","hashOfConfig":"51"},{"size":362,"mtime":1615739170000,"results":"55","hashOfConfig":"51"},{"size":2620,"mtime":1615739170000,"results":"56","hashOfConfig":"51"},{"size":525,"mtime":1615739170000,"results":"57","hashOfConfig":"51"},{"size":1258,"mtime":1615739170000,"results":"58","hashOfConfig":"51"},{"size":3691,"mtime":1615739170000,"results":"59","hashOfConfig":"51"},{"size":1961,"mtime":1615739170000,"results":"60","hashOfConfig":"51"},{"size":533,"mtime":1615739170000,"results":"61","hashOfConfig":"51"},{"size":4208,"mtime":1615739170000,"results":"62","hashOfConfig":"51"},{"size":1233,"mtime":1615739170000,"results":"63","hashOfConfig":"51"},{"size":1319,"mtime":1615739170000,"results":"64","hashOfConfig":"51"},{"size":3593,"mtime":1615739170000,"results":"65","hashOfConfig":"51"},{"size":2295,"mtime":1615739170000,"results":"66","hashOfConfig":"51"},{"size":4565,"mtime":1615739170000,"results":"67","hashOfConfig":"51"},{"size":3856,"mtime":1615739170000,"results":"68","hashOfConfig":"51"},{"size":2171,"mtime":1615739170000,"results":"69","hashOfConfig":"51"},{"size":4368,"mtime":1615739170000,"results":"70","hashOfConfig":"51"},{"size":7169,"mtime":1615739170000,"results":"71","hashOfConfig":"51"},{"size":3358,"mtime":1615739170000,"results":"72","hashOfConfig":"51"},{"size":269,"mtime":1615739170000,"results":"73","hashOfConfig":"51"},{"size":3058,"mtime":1615739170000,"results":"74","hashOfConfig":"51"},{"size":6468,"mtime":1615739170000,"results":"75","hashOfConfig":"51"},{"size":2142,"mtime":1615823278343,"results":"76","hashOfConfig":"51"},{"size":4483,"mtime":1615739170000,"results":"77","hashOfConfig":"51"},{"size":4501,"mtime":1615739170000,"results":"78","hashOfConfig":"51"},{"size":2390,"mtime":1615739170000,"results":"79","hashOfConfig":"51"},{"size":8027,"mtime":1615832421697,"results":"80","hashOfConfig":"51"},{"size":1031,"mtime":1615739170000,"results":"81","hashOfConfig":"51"},{"size":348,"mtime":1615739170000,"results":"82","hashOfConfig":"51"},{"size":554,"mtime":1615739170000,"results":"83","hashOfConfig":"51"},{"size":235,"mtime":1615739170000,"results":"84","hashOfConfig":"51"},{"size":1424,"mtime":1615739170000,"results":"85","hashOfConfig":"51"},{"size":6405,"mtime":1615739170000,"results":"86","hashOfConfig":"51"},{"size":1241,"mtime":1615739170000,"results":"87","hashOfConfig":"51"},{"size":3709,"mtime":1615739170000,"results":"88","hashOfConfig":"51"},{"size":1260,"mtime":1615739170000,"results":"89","hashOfConfig":"51"},{"size":937,"mtime":1615739170000,"results":"90","hashOfConfig":"51"},{"size":2970,"mtime":1615739170000,"results":"91","hashOfConfig":"51"},{"size":381,"mtime":1615739170000,"results":"92","hashOfConfig":"51"},{"size":1051,"mtime":1615739170000,"results":"93","hashOfConfig":"51"},{"size":828,"mtime":1615739170000,"results":"94","hashOfConfig":"51"},{"size":279,"mtime":1615739170000,"results":"95","hashOfConfig":"51"},{"size":336,"mtime":1615739170000,"results":"96","hashOfConfig":"51"},{"size":2044,"mtime":1615739170000,"results":"97","hashOfConfig":"51"},{"size":11872,"mtime":1615834167144,"results":"98","hashOfConfig":"51"},{"size":883,"mtime":1615828156191,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"lebxl",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/index.js",[],["203","204"],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/serviceWorkerRegistration.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/store.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/App.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reportWebVitals.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/productReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/artistReducer.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/cartReducer.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/userReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/reducers/orderReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Footer.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Header.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ArtistScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/HomeScreens.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/RegisterScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/LandingScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/CartScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/UserEditScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/About.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProductListScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProductEditScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ShippingScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/CheckoutScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/UserListScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/PlaceOrderScreen.jsx",["205"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, ListGroup, Image, Card, Button, ListGroupItem } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport CheckoutProgressBar from '../Components/CheckoutProgressBar'\nimport Message from '../Components/Message'\nimport FormContainer from '../Components/formContainer'\nimport { createOrder } from '../actions/orderActions'\n\nconst PlaceOrderScreen = ({ history }) => {\n\n    const dispatch = useDispatch()\n\n\n    const cart = useSelector(state => state.cart)\n\n    //calculate prices\n\n    //round to two decimals\n    const addDecimals = (num) => {\n        return (Math.round(num * 100 / 100).toFixed(2))\n    }\n\n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0))\n    cart.shippingPrice = addDecimals(5)\n    cart.handling = addDecimals(Number((cart.itemsPrice * 0.0255).toFixed(2)))\n    cart.totalPrice = addDecimals((Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.handling)))\n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const { order, success, error } = orderCreate\n\n    useEffect(() => {\n        if (success) {\n            history.push(`/order/${order._id}`)\n        }\n    }, [history, success])\n\n    const placeOrderHandler = () => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymentMethod,\n            itemsPrice: cart.itemsPrice,\n            shippingPrice: cart.shippingPrice,\n            handlingPrice: cart.handling,\n            totalPrice: cart.totalPrice\n        }))\n    }\n\n\n\n\n    return (\n        <div>\n            <FormContainer>\n                <h1 className='py-3'>Review Order</h1>\n                <CheckoutProgressBar step1 step2 step3 step4 val={100} />\n            </FormContainer>\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h3>Shipping</h3>\n\n                            <strong>Address: </strong>\n                            {cart.shippingAddress.address}, {cart.shippingAddress.city}, {cart.shippingAddress.county}, {cart.shippingAddress.postcode}, {cart.shippingAddress.country}\n\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h3>Payment Method</h3>\n                            <strong>Method: </strong>\n                            {cart.paymentMethod}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h3>Review Items</h3>\n                            {cart.cartItems.length === 0 ? <Message>Your cart is empty!</Message> : (\n                                <ListGroup variant='flush'>\n                                    {cart.cartItems.map((item, index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={1}>\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\n                                                </Col>\n                                                <Col>\n                                                    <Link to={`/product/${item.product}`}>\n                                                        {item.name}\n                                                    </Link>\n                                                </Col>\n                                                <Col md={4}>\n                                                    {item.qty} x £{item.price} = £{item.qty * item.price}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroupItem>\n                                <h2>Order Summary</h2>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>£{cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col>Shipping</Col>\n                                    <Col>£{cart.shippingPrice}<p>All orders are sent in a tube with first class tracked postage</p></Col>\n                                </Row>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col>Handling</Col>\n                                    <Col>£{cart.handling}</Col>\n                                </Row>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col><strong>Total</strong></Col>\n                                    <Col><h3>£{cart.totalPrice}</h3></Col>\n                                </Row>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <ListGroupItem>\n                                    {error && <Message variant='danger'>{error}</Message>}\n                                </ListGroupItem>\n                                <Button\n                                    type='button'\n                                    className='btn-block btn-warning'\n                                    disabled={cart.cartItems === 0}\n                                    onClick={placeOrderHandler}\n                                >Place Order</Button>\n                            </ListGroupItem>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n\n        </div>\n    )\n}\n\nexport default PlaceOrderScreen\n","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/PaymentScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProfileScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/ProductScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/LoginScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Screens/OrderScreen.jsx",["206","207","208","209","210","211","212"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, ListGroup, Image, Card, Button, ListGroupItem } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\nimport { getOrderDetails, payOrder } from '../actions/orderActions'\n\nimport axios from 'axios'\n//stripe\nimport { Elements } from \"@stripe/react-stripe-js\"\nimport CreditCardForm from '../PaymentWidgets/CreditCardForm'\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport { ORDER_PAY_RESET } from '../constants/orderConstants'\n\nconst OrderScreen = ({ match }) => {\n\n    const orderId = match.params.id\n    const [stipePromise, setStripePromise] = useState(() => loadStripe(\"pk_test_51IUavEFV3SCXvY9fubZHWbPtve3bWc9yFTuEM5Cx05OEblstUpwW67DwVEcYVMciTAFImsZeyshfX9MVQvGdftLQ00uES24w7o|\"))\n\n    const dispatch = useDispatch()\n\n    const orderDetails = useSelector((state) => state.orderDetails)\n    const { order, loading, error } = orderDetails\n\n    const orderPay = useSelector((state) => state.orderPay)\n    const { loading: loadingPay, success: successPay } = orderPay\n\n    //calculate prices\n    if (!loading) {\n        //round to two decimals\n        const addDecimals = (num) => {\n            return (Math.round(num * 100 / 100).toFixed(2))\n        }\n\n        order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0))\n        order.shippingPrice = addDecimals(5)\n        order.handling = addDecimals(Number((order.itemsPrice * 0.0255).toFixed(2)))\n        order.totalPrice = addDecimals((Number(order.itemsPrice) + Number(order.shippingPrice) + Number(order.handling)))\n    }\n\n\n\n    const handleClick = async (e) => {\n\n    }\n\n\n\n    useEffect(() => {\n        setStripePromise()\n\n        if (!order || order._id !== orderId) {\n            dispatch({ type: ORDER_PAY_RESET })\n            dispatch(getOrderDetails(orderId))\n        }\n\n\n\n    }, [dispatch, order, orderId])\n\n\n\n\n\n\n    return loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n        :\n        <>\n            <h1 className='py-3'>Order Number: {(order._id).slice(-6)}</h1>\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h3>Shipping</h3>\n                            <strong>Name:</strong>{order.user.name}<br></br>\n                            <strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a><br></br>\n                            <strong>Address: </strong>\n                            {order.shippingAddress.address}, {order.shippingAddress.city}, {order.shippingAddress.county}, {order.shippingAddress.postcode}, {order.shippingAddress.country}\n                            <br></br><br></br>\n                            {order.isDelivered ? <Message variant=\"success\">Dispatched on: {order.deliveredAt}</Message> :\n                                <Message variant='danger'>Not Yet Dispatched!</Message>}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h3>Review Items</h3>\n                            {order.orderItems.length === 0 ? <Message>Order is empty!</Message> : (\n                                <ListGroup variant='flush'>\n                                    {order.orderItems.map((item, index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={1}>\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\n                                                </Col>\n                                                <Col>\n                                                    <Link to={`/product/${item.product}`}>\n                                                        {item.name}\n                                                    </Link>\n                                                </Col>\n                                                <Col md={4}>\n                                                    {item.qty} x £{item.price} = £{item.qty * item.price}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h3>Payment Method</h3>\n\n                            <strong>Method: </strong>\n                            {order.paymentMethod}<br>\n                            </br>\n                            <br></br>\n                            {order.isPaid ? <Message variant=\"success\">Payment Succeded on: {order.paidAt}</Message> :\n                                <>\n                                    <Message variant='danger'>Payment not yet Complete</Message>\n\n                                    <Card border=\"primary\" id=\"paymentWidgetContainerCard\">\n\n\n                                        <Card.Header>\n                                            <Row>\n                                                <Col md=\"auto\">\n                                                    Pay Now by Card\n                                                </Col>\n                                            </Row>\n                                        </Card.Header>\n\n\n                                        <Card.Body>\n\n\n                                            <Elements\n                                                stripe={loadStripe(\"pk_test_51IUavEFV3SCXvY9fubZHWbPtve3bWc9yFTuEM5Cx05OEblstUpwW67DwVEcYVMciTAFImsZeyshfX9MVQvGdftLQ00uES24w7o\")}\n                                            >\n                                                <CreditCardForm order={order} />\n                                            </Elements>\n                                        </Card.Body>\n                                    </Card>\n\n\n\n\n\n\n                                </>}\n                        </ListGroup.Item>\n\n\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroupItem>\n                                <h2>Order Summary</h2>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>£{order.itemsPrice}</Col>\n                                </Row>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col>Shipping</Col>\n                                    <Col>£{order.shippingPrice}<p>All orders are sent in a tube with first class tracked postage</p></Col>\n                                </Row>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col>Handling</Col>\n                                    <Col>£{order.handling}</Col>\n                                </Row>\n                            </ListGroupItem>\n                            <ListGroupItem>\n                                <Row>\n                                    <Col><strong>Total</strong></Col>\n                                    <Col><h3>£{order.totalPrice}</h3></Col>\n                                </Row>\n                            </ListGroupItem>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n\n        </>\n}\n\nexport default OrderScreen","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/productConstants.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/artistConstants.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/orderConstants.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/cartConstants.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/constants/userConstants.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/userActions.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/artistActions.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/productActions.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/cartActions.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Search.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/actions/orderActions.js",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/formContainer.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Artist.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Product.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Message.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/Loader.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/Components/CheckoutProgressBar.jsx",[],"/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/PaymentWidgets/CreditCardForm.jsx",["213","214","215","216","217","218"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getOrderDetails, payOrder } from '../actions/orderActions'\nimport { useHistory, Redirect, Link } from \"react-router-dom\";\nimport {\n    CardElement,\n    useElements,\n    useStripe,\n    Elements,\n} from \"@stripe/react-stripe-js\";\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport Field from \"./Field\";\n//css provided by stripe to format elements\n\nconst axios = require(\"axios\");\n\n\n\n\n//credit card element specific styling\nconst CARD_OPTIONS = {\n    iconStyle: \"solid\",\n    style: {\n        base: {\n            fontWeight: 500,\n            fontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\n            fontSize: \"18px\",\n            color: \"#424770\",\n            fontSmoothing: \"antialiased\",\n            \":-webkit-autofill\": {\n                color: '#cccccc',\n            },\n            \"::placeholder\": {\n                color: '#888',\n            },\n        },\n        invalid: {\n            iconColor: \"red\",\n            color: \"red\",\n        },\n    },\n};\n\n//scredit card button sub component\nconst CardField = ({ onChange }) => (\n    <div className=\"FormRow\">\n        <CardElement options={CARD_OPTIONS} onChange={onChange} />\n    </div>\n);\n\n//submit button sub component\nconst SubmitButton = ({ processing, error, children, disabled }) => (\n    <button\n        className={`btn btn-success btn-block rounded SubmitButton ${error ? \"SubmitButton--error\" : \"\"}`}\n        type=\"submit\"\n        disabled={processing || disabled}\n    >\n        {processing ? \"Processing...\" : children}\n    </button>\n);\n\n//component declaration\nexport default function CreditCardForm(props, { match }) {\n    const dispatch = useDispatch()\n    const orderDetails = useSelector((state) => state.orderDetails)\n    const { order } = orderDetails\n    const cart = useSelector((state) => state.cart)\n    const { shippingAddress } = cart\n    let history = useHistory();\n\n    const stripe = useStripe();\n    const elements = useElements();\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(false)\n    const [cardComplete, setCardComplete] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [paymentMethod, setPaymentMethod] = useState('');\n    const [price, setPrice] = useState(order.totalPrice);\n    const [billingDetails, setBillingDetails] = useState({\n        email: order.user.email,\n        name: order.user.name,\n        address: {\n            line1: `${shippingAddress.address}, ${shippingAddress.city}, ${shippingAddress.county}`,\n            line2: shippingAddress.postcode,\n        }\n    });\n\n    //resets state on completion\n    const reset = () => {\n        setError(null);\n        setProcessing(false);\n        setPaymentMethod('');\n        setPrice(0);\n        setSuccess(false);\n        setCardComplete(false);\n        setBillingDetails({\n            email: order.user.email,\n            name: order.user.name,\n            address: {\n                line1: ''\n            }\n        });\n    };\n\n    /*\n    This code runs when a card transaction is submitted\n    There are three main components to this function:\n    \t\n        1. create a new stripe payment method using the form data\n    \t\n        2. get a payment intent from the server using the speficied price\n        3. confirm the payment intent using the new payment method\n        4. send a confiemation to the server if the payment succeeded\n    */\n    const handleSubmit = async (event) => {\n        console.log('SUBMITTED!')\n        //prevent default form values\n        event.preventDefault();\n\n        ///if stripe api is loaded\n        if (!stripe || !elements) {\n            return;\n        }\n\n        //handle errors\n        if (error) {\n            console.log(error);\n            elements.getElement(\"card\").focus();\n            return;\n        }\n\n        if (price === 0) {\n            return;\n        }\n\n        //start processing animation on submit button\n        if (cardComplete) {\n            setProcessing(true);\n        } else {\n            return;\n        }\n\n        //STEP 1:\n        //create new payment method based on card and form information\n        const payload = await stripe.createPaymentMethod({\n            type: \"card\",\n            card: elements.getElement(CardElement),\n            billing_details: billingDetails\n        });\n\n        //handle errors, otherwise set the new payment method in state\n        if (payload.error) {\n            setError(payload.error);\n            return;\n        }\n\n        //STEP 2:\n        //create a new payment request and get irs client secret + id from the server\n        const intentData = await axios\n            .post(\"/stripe\", {\n                //include the bet amount\n                price: price,\n            })\n            .then(\n                (response) => {\n                    //SUCCESS: put client secret and id into an object and return it\n                    return {\n                        secret: response.data.client_secret,\n                        id: response.data.intent_id,\n                    };\n                },\n                (error) => {\n                    //ERROR: log the error and return\n                    setError(error)\n                    return error;\n                }\n            );\n\n        //STEP 3:\n        //confirm the payment and use the new payment method\n        const result = await stripe.confirmCardPayment(intentData.secret, {\n            payment_method: payload.paymentMethod.id,\n        });\n\n        //handle errors again\n        if (result.error) {\n            setError(result.error);\n            return\n        }\n\n        //STEP 4:\n        // The payment has been processed! send a confirmation to the server\n        if (result.paymentIntent.status === \"succeeded\") {\n            const confirmedPayment = await axios\n                .post(\"/confirm-payment\", {\n                    //include id of payment\n                    payment_id: intentData.id,\n                    payment_type: \"stripe\",\n                    //send any other data here\n                })\n                .then(\n                    (response) => {\n                        //SUCCESS: return the response message\n                        return response.data.success;\n                    },\n                    (error) => {\n                        //ERROR:\n                        console.log(error);\n                        setError(error)\n                        return error;\n                    }\n                );\n\n            //reset the state and show the success message\n            if (confirmedPayment) {\n\n                //reset the form\n                reset();\n\n                /*\n                 YOUR APPLICATION SPECIFIC CODE HERE:\n                 for this example all we do is render a modal\n                */\n\n                setSuccess(true);\n\n                dispatch(payOrder(order._id, success))\n\n            }\n        }\n    }\n\n\n\n    //render\n    return (\n        // the credit card form\n        <Form className=\"Form\" onSubmit={handleSubmit}>\n\n            {/* Error modal */}\n            <Modal show={error != null}>\n                <Modal.Header>\n                    <Modal.Title>Error</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p>{error}</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={(event) => { setError(null) }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n\n            {/* success banner, only shows after confirmation */}\n            <Modal show={success}>\n                <Modal.Header>\n                    <Modal.Title>Payment Succeeded</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Your card payment has been confirmed\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button className=\"btn\" variant=\"success\" onClick={() => { history.go(0) }}>Review Order</Button>\n\n                </Modal.Footer>\n            </Modal>\n\n            {/* Bet amount field */}\n            <Field\n                label=\"Amount to Pay\"\n                id=\"bet\"\n\n                placeholder={Number(price)}\n                required\n                min=\"1\"\n                read-only\n                value={price}\n                onChange={(event) => {\n                    if (event.target.value != price) {\n                        setPrice(price);\n                    }\n                    else {\n                        setPrice(price);\n                    }\n                }}\n            />\n\n            {/* Credit Card Payment Form */}\n            <fieldset className=\"FormGroup\">\n                {/* name field */}\n                <Field\n                    label=\"Name\"\n                    id=\"name\"\n                    type=\"text\"\n                    required\n                    autoComplete=\"name\"\n                    read-only\n                    disabled='disabled'\n                    value={billingDetails.name}\n                    onChange={(event) => {\n                        setBillingDetails({ ...billingDetails, name: event.target.value });\n                    }}\n                />\n                {/* email field */}\n                <Field\n                    label=\"Email\"\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"janedoe@gmail.com\"\n                    required\n                    autoComplete=\"email\"\n                    value={billingDetails.email}\n                    onChange={(event) => {\n                        setBillingDetails({ ...billingDetails, email: event.target.value });\n                    }}\n                />\n                {/* address fields */}\n                <Field\n                    label=\"Billing Address\"\n                    id=\"line1\"\n                    type=\"address-line1\"\n\n                    required\n\n                    value={billingDetails.address.line1}\n                    onChange={(event) => {\n                        setBillingDetails({\n                            ...billingDetails,\n                            address: {\n                                line1: event.target.value,\n                                line2: billingDetails.address.line2\n                            }\n                        });\n                    }}\n                />\n                {/* address line 2 */}\n                <Field\n                    label=\"\"\n                    id=\"line2\"\n                    type=\"address-line2\"\n                    placeholder=\"building/suite number\"\n                    autoComplete=\"address-line2\"\n                    value={billingDetails.address.line2}\n                    onChange={(event) => {\n                        setBillingDetails({\n                            ...billingDetails,\n                            address: {\n                                line1: billingDetails.address.line1,\n                                line2: event.target.value,\n                            }\n                        });\n                    }}\n                />\n            </fieldset>\n\n            {/* credit card field and submit button */}\n            <fieldset className=\"FormGroup py-3\">\n                {/* card */}\n                <CardField\n                    onChange={(event) => {\n                        setError(event.error);\n                        setCardComplete(event.complete);\n                    }}\n                />\n\n            </fieldset>\n            {/* submit */}\n            <SubmitButton\n                type=\"submit\"\n                processing={processing}\n                error={error}\n                disabled={!stripe}\n            >\n                Make Payment\n            </SubmitButton>\n        </Form>\n    );\n\n}","/Users/jim/Desktop/BSc Web Projects/InkedPaper-OrderSystem/frontend/src/PaymentWidgets/Field.jsx",[],["219","220"],{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":36,"column":8,"nodeType":"227","endLine":36,"endColumn":26,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":3,"column":44,"nodeType":"231","messageId":"232","endLine":3,"endColumn":50},{"ruleId":"229","severity":1,"message":"233","line":7,"column":27,"nodeType":"231","messageId":"232","endLine":7,"endColumn":35},{"ruleId":"229","severity":1,"message":"234","line":9,"column":8,"nodeType":"231","messageId":"232","endLine":9,"endColumn":13},{"ruleId":"229","severity":1,"message":"235","line":19,"column":12,"nodeType":"231","messageId":"232","endLine":19,"endColumn":24},{"ruleId":"229","severity":1,"message":"236","line":27,"column":22,"nodeType":"231","messageId":"232","endLine":27,"endColumn":32},{"ruleId":"229","severity":1,"message":"237","line":27,"column":43,"nodeType":"231","messageId":"232","endLine":27,"endColumn":53},{"ruleId":"229","severity":1,"message":"238","line":44,"column":11,"nodeType":"231","messageId":"232","endLine":44,"endColumn":22},{"ruleId":"229","severity":1,"message":"239","line":3,"column":10,"nodeType":"231","messageId":"232","endLine":3,"endColumn":25},{"ruleId":"229","severity":1,"message":"240","line":4,"column":22,"nodeType":"231","messageId":"232","endLine":4,"endColumn":30},{"ruleId":"229","severity":1,"message":"241","line":4,"column":32,"nodeType":"231","messageId":"232","endLine":4,"endColumn":36},{"ruleId":"229","severity":1,"message":"242","line":9,"column":5,"nodeType":"231","messageId":"232","endLine":9,"endColumn":13},{"ruleId":"229","severity":1,"message":"243","line":77,"column":12,"nodeType":"231","messageId":"232","endLine":77,"endColumn":25},{"ruleId":"244","severity":1,"message":"245","line":280,"column":44,"nodeType":"246","messageId":"247","endLine":280,"endColumn":46},{"ruleId":"221","replacedBy":"248"},{"ruleId":"223","replacedBy":"249"},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["252"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'payOrder' is defined but never used.","'axios' is defined but never used.","'stipePromise' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPay' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'getOrderDetails' is defined but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","'Elements' is defined but never used.","'paymentMethod' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["250"],["251"],"no-global-assign","no-unsafe-negation",{"desc":"253","fix":"254"},"Update the dependencies array to be: [history, order._id, success]",{"range":"255","text":"256"},[1295,1313],"[history, order._id, success]"]